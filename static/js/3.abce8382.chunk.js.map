{"version":3,"sources":["videocontrol.js"],"names":["Videocontrol","props","audioSource","React","createRef","audioOutput","videoSource","videoElement","state","cameraLoading","this","setupMediaWithOptions","instance","gotDevices","attachSinkId","changeAudioDestination","gotStream","handleError","start","window","stream","getTracks","forEach","track","stop","navigator","mediaDevices","getUserMedia","constraints","then","catch","error","message","permissions","query","name","result","setState","console","log","a","style","visibility","srcObject","parentStateUpdate","mediaControlReady","enumerateDevices","audioDestination","audioOutputSelect","value","element","sinkId","setSinkId","errorMessage","selectedIndex","warn","deviceInfos","values","selectors","map","select","firstChild","removeChild","i","length","deviceInfo","option","document","createElement","deviceId","kind","text","label","audioInputSelect","appendChild","videoSelect","selectorIndex","Array","prototype","slice","call","childNodes","some","n","current","audio","exact","undefined","video","disabled","HTMLMediaElement","onchange","className","hidden","htmlFor","id","ref","autoPlay","playsInline","muted","width","parentState","videoSize","height","item","required","Component"],"mappings":"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","file":"static/js/3.abce8382.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Videocontrol extends Component {\n\n  constructor(props) {\n    super(props);\n    this.audioSource = React.createRef();\n    this.audioOutput = React.createRef();\n    this.videoSource = React.createRef();\n    this.videoElement = null;\n    this.state = {\n      cameraLoading: '',\n    }\n  }\n\n  componentDidMount() {\n    this.setupMediaWithOptions(this);\n  }\n\n  async setupMediaWithOptions(instance) {\n    const videoElement = this.videoElement;\n    const audioInputSelect = this.audioSource.current;\n    const audioOutputSelect = this.audioOutput.current;\n    const videoSelect = this.videoSource.current;\n    const selectors = [audioInputSelect, audioOutputSelect, videoSelect];\n\n    const audioSource = audioInputSelect.value;\n    const videoSource = videoSelect.value;\n    const constraints = {\n      audio: {deviceId: audioSource ? {exact: audioSource} : undefined},\n      video: {deviceId: videoSource ? {exact: videoSource} : undefined}\n    };\n  \n    audioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\n    \n    function gotDevices(deviceInfos) {\n      // Handles being called several times to update labels. Preserve values.\n      const values = selectors.map(select => select.value);\n      selectors.forEach(select => {\n        while (select.firstChild) {\n          select.removeChild(select.firstChild);\n        }\n      });\n      for (let i = 0; i !== deviceInfos.length; ++i) {\n        const deviceInfo = deviceInfos[i];\n        const option = document.createElement('option');\n        option.value = deviceInfo.deviceId;\n        if (deviceInfo.kind === 'audioinput') {\n          option.text = deviceInfo.label || `microphone ${audioInputSelect.length + 1}`;\n          audioInputSelect.appendChild(option);\n        } else if (deviceInfo.kind === 'audiooutput') {\n          option.text = deviceInfo.label || `speaker ${audioOutputSelect.length + 1}`;\n          audioOutputSelect.appendChild(option);\n        } else if (deviceInfo.kind === 'videoinput') {\n          option.text = deviceInfo.label || `camera ${videoSelect.length + 1}`;\n          videoSelect.appendChild(option);\n        } else {\n          console.log('Some other kind of source/device: ', deviceInfo);\n        }\n      }\n      selectors.forEach((select, selectorIndex) => {\n        if (Array.prototype.slice.call(select.childNodes).some(n => n.value === values[selectorIndex])) {\n          select.value = values[selectorIndex];\n        }\n      });\n    }\n    \n    navigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError);\n    \n    // Attach audio output device to video element using device/sink ID.\n    function attachSinkId(element, sinkId) {\n      if (typeof element.sinkId !== 'undefined') {\n        element.setSinkId(sinkId)\n          .then(() => {\n            console.log(`Success, audio output device attached: ${sinkId}`);\n          })\n          .catch(error => {\n            let errorMessage = error;\n            if (error.name === 'SecurityError') {\n              errorMessage = `You need to use HTTPS for selecting audio output device: ${error}`;\n            }\n            console.error(errorMessage);\n            // Jump back to first output device in the list as it's the default.\n            audioOutputSelect.selectedIndex = 0;\n          });\n      } else {\n        console.warn('Browser does not support output device selection.');\n      }\n    }\n    \n    function changeAudioDestination() {\n      const audioDestination = audioOutputSelect.value;\n      attachSinkId(videoElement, audioDestination);\n    }\n    \n    async function gotStream(stream) {\n      window.stream = stream; // make stream available to console\n      videoElement.style.visibility = 'visible';\n      videoElement.srcObject = stream;\n      await instance.props.parentStateUpdate({ mediaControlReady: true })\n      // Refresh button list in case labels have become available\n      return navigator.mediaDevices.enumerateDevices();\n    }\n    \n    function handleError(error) {\n      if(error.message === 'Permission denied') {\n        navigator.permissions.query({name:'camera'}).then(result => {\n          if(result.state !== 'granted') {\n            //console.log(this.props)\n            instance.setState({ cameraLoading: 'Kindly grant access to the camera' });\n            navigator.mediaDevices.getUserMedia(constraints).then(gotStream).then(gotDevices).catch(handleError);\n          }\n        }) \n      }   \n      console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);\n    }\n    \n    function start() {\n      if (window.stream) {\n        window.stream.getTracks().forEach(track => {\n          track.stop();\n        });\n      }\n      navigator.mediaDevices.getUserMedia(constraints).then(gotStream).then(gotDevices).catch(handleError);\n    }\n    \n    audioInputSelect.onchange = start;\n    audioOutputSelect.onchange = changeAudioDestination;\n    \n    videoSelect.onchange = start;\n    \n    start();\n  }\n\n  render() {\n    return (\n      <div >\n        { this.state.cameraLoading === \"\" \n        ?\n          (\n            <div className=\"videoContainer\">\n              <div className=\"optionsContainer\">\n                <div className=\"select\" hidden>\n                  <label htmlFor=\"audioSource\">Audio input source: </label><select id=\"audioSource\" ref={this.audioSource}></select>\n                </div>\n                <div className=\"select\" hidden>\n                  <label htmlFor=\"audioOutput\">Audio output destination: </label><select id=\"audioOutput\" ref={this.audioOutput} ></select>\n                </div>\n                <div className=\"select\">\n                  <label htmlFor=\"videoSource\">Video source: </label><select id=\"videoSource\" ref={this.videoSource} ></select>\n                </div>\n              </div>\n              <div>\n                  <video autoPlay playsInline muted width={this.props.parentState.videoSize.width} height={this.props.parentState.videoSize.height} ref={item => this.videoElement = item} required ></video>\n              </div>\n              <div>\n                (for best experience try in chrome browser)\n              </div>\n            </div>\n          )     \n        :\n          (\n            <div className=\"loadingMessage\" >{this.state.cameraLoading}</div>\n          )\n        }\n      </div>\n    )\n  }\n}\n\nexport default Videocontrol;"],"sourceRoot":""}