{"version":3,"sources":["mlapp.js","serviceWorker.js","index.js"],"names":["Videocontrol","React","lazy","Mlapp","props","updateState","options","a","setState","state","loadingContainer","createRef","results","classifier","knnClassifier","loadingInterval","netModel","classes","classCount","modelLoading","mediaControlReady","showDetails","videoSize","width","height","updateInstructionsState","cssInstructionsValue","getComputedStyle","document","querySelector","getPropertyValue","console","log","updateVideoSize","videoElem","cssVideoWidthValue","cssVideoHeightValue","window","addEventListener","screenResize","title","this","checkOnlineStatusAndLoadApp","videoElement","removeEventListener","internetState","navigator","onLine","updateOnlineStatus","loadingContRef","current","innerHTML","className","loadApp","loadMLModel","setTimeout","runClassifier","dir","Promise","resolve","reject","mobilenet","net","getNumClasses","activation","infer","predictClass","result","output","prediction","classIndex","probability","confidences","undefined","resultText","style","visibility","trim","tf","classId","addExample","Suspense","fallback","parentState","parentStateUpdate","ref","item","map","idx","key","input","onClick","_","toLowerCase","clearAllClasses","disabled","open","href","target","rel","headerComponent","videoComponent","buttonListComponent","resultsComponent","instructionListComponent","footerComponent","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bd30110d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as knnClassifier from \"@tensorflow-models/knn-classifier\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport './mlapp.css';\n\nconst Videocontrol = React.lazy(() => import(\"./videocontrol\"))\n\nclass Mlapp extends Component {\n\n  constructor(props) {\n    super(props);\n    this.loadingContainer = React.createRef();\n    this.results = React.createRef();\n    this.classifier = knnClassifier.create();\n    this.loadingInterval = null;\n    this.state = {\n      netModel: null,\n      classes: ['A','B','C', 'Reset'],\n      classCount: 0,\n      modelLoading: 'Loading ...',\n      mediaControlReady: false,\n      showDetails: false,\n      videoSize: {\n        width: '80%',\n        height: '80%'\n      },\n      updateInstructionsState: async () => {\n        try {\n          const cssInstructionsValue = getComputedStyle(document.querySelector(\".instructions\"))\n          .getPropertyValue('--showInstructions');\n          await this.updateState({ showDetails: (cssInstructionsValue === 'true' ? true : false) });\n        }\n        catch(error) { \n          console.log(`Error caused at updateInstructionsState() : ${error}`) \n        }\n      },\n      updateVideoSize: async () => {\n        try {          \n          const videoElem = getComputedStyle(document.querySelector(\".videoContainer\"));\n          const cssVideoWidthValue = videoElem.getPropertyValue('--videoWidth'); \n          const cssVideoHeightValue = videoElem.getPropertyValue('--videoHeight'); \n          await this.updateState({\n            videoSize : {\n              width: cssVideoWidthValue\n              ,height: cssVideoHeightValue\n            }\n          })           \n        } catch (error) { \n          console.log(`Error caused at updateVideoSize() : ${error}`)  \n        }\n      }    \n    }  \n  }\n\n  async componentDidMount() {\n      window.addEventListener('resize', () => this.screenResize());\n      document.title = \"ML Classifier App\";\n      this.checkOnlineStatusAndLoadApp();\n  }\n\n  componentWillUnmount() {\n    this.classifier = null;\n    this.loadingInterval = null; \n    this.videoElement = null;\n    window.removeEventListener('resize', () => this.screenResize())\n  }\n\n  updateState = async (options) => await this.setState({...this.state, ...options}) \n\n  async checkOnlineStatusAndLoadApp() {\n    let internetState = navigator.onLine;\n\n    const updateOnlineStatus = async () => {\n      internetState = navigator.onLine;\n      console.log(`navigator online state: ${internetState}`)\n     \n      await this.updateState({ modelLoading : 'Loading ...' });\n\n      const loadingContRef = this.loadingContainer.current;\n      loadingContRef.innerHTML = '';\n      loadingContRef.className = 'loadingContainer';\n\n      // if (internetState) { \n        this.loadApp();\n      // }\n      // else { \n      //   loadingContRef.className = 'loadingMessage';\n      //   loadingContRef.innerHTML = 'Online availability is required to load ML model initially from remote server for this app to function!!';  \n      // }\n    }\n\n    window.addEventListener('online',  updateOnlineStatus);\n    //window.addEventListener('offline', updateOnlineStatus);\n    await updateOnlineStatus();\n    return internetState;\n  }\n\n  async loadApp() {\n    try {\n      await this.loadMLModel();\n      await this.updateState({ modelLoading : '' });      \n      setTimeout(async() => {     \n        await this.screenResize();\n      }, 1000);\n      this.runClassifier();      \n    } catch (error) {\n        console.dir(`error caused: ${error}`)\n    } finally {\n      console.log('model loading in app completed..')\n    }\n  }\n\n  async loadMLModel() {\n    return new Promise(async (resolve, reject) => {\n      console.log('Loading mobilenet..');\n      try {\n        // Load the model.\n        let net = await mobilenet.load();\n        await this.updateState({ netModel: net }); \n        console.log('Sucessfully loaded model');\n        return resolve();        \n      } catch (error) {\n        console.log('model mobilenet could not be loaded..');\n        return reject()\n      }\n    });\n  }\n \n  async runClassifier() {\n    console.log('classifier started...');\n\n    let net = this.state.netModel;\n\n    while (true) {\n      if (this.classifier.getNumClasses() > 0) {\n        // Get the activation from mobilenet from the webcam.\n        const activation = net.infer(this.videoElement.videoElement, 'conv_preds');\n        // Get the most likely class and confidences from the classifier module.\n        const result = await this.classifier.predictClass(activation);\n\n        const classes = this.state.classes;\n        const output = { prediction: classes[result.classIndex]\n          , probability: (result.confidences[result.classIndex] !== null && result.confidences[result.classIndex] !== undefined ? result.confidences[result.classIndex] * 100 : 0) \n        };\n        let resultText = '';\n        if(output.prediction !== undefined) {\n          resultText = `<ul><li>Prediction&nbsp;&nbsp;: ${output.prediction} </li><li>Probability&nbsp;: ${output.probability + '%'} </li></ul>`;\n        }\n        else {\n        }\n        this.results.current.innerHTML = resultText;\n        this.results.current.style.visibility = (resultText.trim() !== '' ? 'visible' : 'hidden');\n      }\n\n      await tf.nextFrame();\n    }\n  }\n\n  // Reads an image from the webcam and associates it with a specific class index.\n  async addExample(classId) {\n    const net = this.state.netModel;\n    if(net !== null && ((this.classifier.getNumClasses() > 0 && classId > 0) || (this.classifier.getNumClasses() >= 0 && classId === 0))) {\n      // Get the intermediate activation of MobileNet 'conv_preds' and pass that\n      // to the KNN classifier.\n      const activation = net.infer(this.videoElement.videoElement, 'conv_preds');\n\n      // Pass the intermediate activation to the classifier.\n      await this.classifier.addExample(activation, classId);\n    }\n    this.updateState({ classCount: (classId + 1 > this.state.classCount ? classId + 1 : this.state.classCount) })\n  };\n  \n  async screenResize() {\n    console.log(`screenResize() called..`)\n    await this.state.updateVideoSize();\n    await this.state.updateInstructionsState();\n  }\n  \n  headerComponent() {\n    return (\n      <h2>Machine learning for video classification</h2>\n    )\n  }\n\n  videoComponent() {\n    return (\n      <React.Suspense fallback={<div className=\"loadingContainer\" >Loading...</div>} >\n        <Videocontrol \n          parentState={this.state}\n          parentStateUpdate={async (options) => await this.updateState(options)} \n          ref={item => this.videoElement = item} \n        />\n      </React.Suspense>\n    )\n  }\n\n  buttonListComponent() {\n    return (\n      <div className=\"btnContainer\">\n      {\n        this.state.classes\n        .map((item,idx) => \n            <button \n              key={`btn${item+idx}`} ref={input => this[`btn${item}`] = input} \n              onClick={_ => { \n                if(item.toLowerCase() !== 'reset') {\n                  this.addExample(idx) \n                }\n                else {\n                  this.classifier.clearAllClasses();\n                  this.updateState({ classCount: 0 });\n                  this.results.current.innerHTML = ''\n                }\n              }} \n              disabled={\n                ((item.toLowerCase() === 'reset' && this.state.classCount > 0)\n                  ? false\n                  : (!( idx <= this.state.classCount ) || !(this.state.mediaControlReady)) )\n              }\n            >\n              {(item.toLowerCase() !== 'reset' ? \"Add \" : \"\") + item}\n           </button>\n        )\n      }\n      </div>  \n    )\n  }\n\n  resultsComponent() {\n    return <div ref={this.results} className=\"results\" >\n    </div>\n  }\n\n  instructionListComponent() {\n    return (\n      <div className=\"instructions\" >\n        <details open={this.state.showDetails}>\n          <summary>Instructions</summary>\n          <ul>\n          {\n            [\n              \"Snap multiple views using the available buttons(in presented order as A -> B -> C) to recognize and learn, for each button hit - it would start displaying prediction with probability subsequently\"\n              ,\"For instance, capture the tilting faces in directions for buttons as Add A(left), Add B(center) and Add C(right) mutiple times i.e. atleast 3 times each or more is recommended (prediction is certainly more accurate the more image snapshots are learned)\"\n              ,\"Try tilting faces from left to right freely to show expected predictions or refine it further by continuing with the respective buttons as desired\"\n              ,\"All of the data from camera stream is processed and recognized to learn locally and is not stored or accessed on any remote server\"\n            ].map((item, idx) => <li key={idx} >{item}</li>)\n          }\n          </ul>\n        </details>\n      </div>\n    )                    \n  }\n\n  footerComponent() {\n    return (\n    <div className=\"footer\">\n      Project available on github <a href=\"https://github.com/NileshSP/reactTfClassifier\" target=\"_blank\" rel=\"noopener noreferrer\" >@NileshSP/reactTfClassifier</a> \n    </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <div className=\"mainContainer\">\n          {this.state.modelLoading === '' \n          ? \n            (\n              <div className=\"workingContainer\">\n                { this.headerComponent() }\n                { this.videoComponent() }\n                { this.buttonListComponent() }\n                { this.resultsComponent() }\n                { this.instructionListComponent() }\n                { this.footerComponent() }\n              </div>\n            )\n          : \n            (\n              <div className=\"loadingContainer\" ref={this.loadingContainer} ></div>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Mlapp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  //if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swFileName = \"offline.js\";//service-worker.js\n      const swUrl = `${process.env.PUBLIC_URL}/${swFileName}`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Mlapp from './mlapp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Mlapp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}